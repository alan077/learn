做很大一场运营活动需要考虑的容量预估
    机器能否抗住， 如果扛不住，需要加多少台机器
    数据库是否需要分表，如果需要分库，需要分几个库
如何知道访问量，运营活动或系统上线后PV的评估
    询问业务方，询问运营或产品，看对运营活动或产品上线后的预期是什么
    例如：58要做一个APP-push的运营活动，计划在30分钟内完成5000W用户的push推送，预计push消息点击率10%，求push落地页系统的总访问量
        PV=5000W*10%=500W
评估平均访问量QPS
    有了总量。除以总时间即可，如果按照天评估，一天按照4W秒计算
    例如：
    push落地页系统30分钟的总访问量是500W，求平均QPS
        500W/(30*60)=2778，大概3000QPS
    主站首页估计日均PV 8000W，求平均访问QPS
        8000W/4W=2000，大概2000QPS
评估高峰QPS
    容量规划时，不能只考虑平均QPS，而是要抗住高峰的QPS。
    根据业务特性，通过业务访问量曲线评估
    说明：有一些业务例如“秒杀业务”比较难画出业务访问趋势图，这类业务的容量评估不在此列。
评估系统、单机极限QPS
        在一个服务上线前，一般来说需要进行压力测试，以APP-push运营活动落地页为例(日均QPS2000，峰值5000)
            1、访问端是APP
            2、运营活动H5落地页是一个WEB站点
            3、H5落地页由缓存Cache、数据库DB中的数据拼装而成
          通过压力测试发现，WEB层是瓶颈，tomcat压测单机只能抗住1200QPS(一般来说。1%的流量到数据库，数据库500QPS还是能轻松抗住的，Cache的话QPS能抗住，需要评估cache的带宽，假设不是瓶颈)
          我们就得到了Web单机极限的QPS是1200.一般来说，线上系统不好跑满到极限的，打个8折，。单机线上允许跑到QPS1000
线上冗余度
    在评估完容量后，需要多加1~2台机器做预留

总结：
  互联网架构设计如何进行容量评估：
    【步骤一：评估总访问量】 -> 询问业务、产品、运营
    【步骤二：评估平均访问量QPS】-> 除以时间，一天算4w秒
    【步骤三：评估高峰QPS】 -> 根据业务曲线图来
    【步骤四：评估系统、单机极限QPS】 -> 压测很重要
    【步骤五：根据线上冗余度回答两个问题】 -> 估计冗余度与线上冗余度差值

秒杀系统
    1、秒杀系统独立部署
    2、秒杀商品页面静态化
    3、租借秒杀活动网络带宽
    4、动态生成随机下单页URL
    
首页不应该访问数据库，首页需要的数据可以从缓存服务器或者搜索引擎服务器获取
首页最好是静态的

两个架构优化思路：
（1）尽量将请求拦截在系统上游（越上游越好）；
（2）读多写少的常用多使用缓存（缓存抗读压力）；
浏览器和APP：做限速
站点层：按照uid做限速，做页面缓存
服务层：按照业务做写请求队列控制流量，做数据缓存
数据层：闲庭信步
并且：结合业务做优化