selenium常见元素定位方法和操作
定位元素方法
    定义一个页面中的元素
        find_element_by_id
        find_element_by_name
        find_element_by_xpath
        find_element_by_link_text
        find_element_by_partial_link_text
        find_element_by_tag_name
        find_element_by_class_name
        find_element_by_css_selector
    查找多个元素(这些方法将返回一个列表)
        find_elements_by_name
        find_elements_by_xpath
        find_elements_by_link_text
        find_elements_by_partial_link_text
        find_elements_by_tag_name
        find_elements_by_class_name
        find_elements_by_css_selector
操作元素方法
    通常所有的操作与页面交换都将通过WebElement接口，常见的操作元素方法如下
        clear 清除元素的内容
        send_keys 模拟按键输入
        click 点击元素
        submit 提交表单
WebElement接口获取值
    通过WebElement接口可以获取常用的值
        size 获取元素的尺寸
        text 获取元素的文本
        get_attribute(name) 获取属性值
        location 获取元素坐标，先找到要获取的元素，再调用该方法
        page_source 返回页面源码
        driver.title 返回页面标题
        current_url 获取当前页面的URL
        is_displayed() 设置该元素是否可见
        is_enabled() 判断元素是否被使用
        is_selected() 判断元素是否被选中
        tag_name 返回元素的tagName
鼠标操作
    在现实的自动化测试中关于鼠标的操作不仅仅是click()单击操作，还有很多包含在ActionChains类中的操作
        context_click(elem) 右击鼠标点击元素elem，另存为等行为
        double_click(elem) 双击鼠标点击元素elem，地图web可实现放大功能
        drag_and_drop(source,target) 拖动鼠标，源元素按下左键移动至目标元素释放
        move_to_element(elem) 鼠标移动到一个元素上
        click_and_hold(elem) 按下鼠标左键在一个元素上
        perform() 在通过调用该函数执行ActionChains中存储行为
键盘操作
    前面描述了鼠标操作，现在简述键盘操作。在webdriver的keys类中提供了键盘的按键操作
        send_keys(Keys.ENTER) 按下回车键
        send_keys(Keys.TAB) 按下Tab制表键
        send_keys(Keys.SPACE) 按下空格键space
        send_keys(Kyes.ESCAPE) 按下回退键Esc
        send_keys(Keys.BACK_SPACE) 按下删除键BackSpace
        send_keys(Keys.SHIFT) 按下shift键
        send_keys(Keys.CONTROL) 按下Ctrl键
        send_keys(Keys.ARROW_DOWN) 按下鼠标光标向下按键
        send_keys(Keys.CONTROL,'a') 组合键全选Ctrl+A
        send_keys(Keys.CONTROL,'c') 组合键复制Ctrl+C
        send_keys(Keys.CONTROL,'x') 组合键剪切Ctrl+X
        send_keys(Keys.CONTROL,'v') 组合键粘贴Ctrl+V  

        
        
案例
定位方法的用法

假如我们有一个Web页面，通过前端工具（如，Firebug）查看到一个元素的属性是这样的。

<html>
  <head>
  <body link="#0000cc">
    <a id="result_logo" href="/" onmousedown="return c({'fm':'tab','tab':'logo'})">
    <form id="form" class="fm" name="f" action="/s">
      <span class="soutu-btn"></span>
        <input id="kw" class="s_ipt" name="wd" value="" maxlength="255" autocomplete="off">
我们的目的是要定位input标签的输入框。

通过id定位:

dr.find_element_by_id("kw")
通过name定位:

dr.find_element_by_name("wd")
通过class name定位:

dr.find_element_by_class_name("s_ipt")
通过tag name定位:

dr.find_element_by_tag_name("input")
通过xpath定位，xpath定位有N种写法，这里列几个常用写法:

dr.find_element_by_xpath("//*[@id='kw']")
dr.find_element_by_xpath("//*[@name='wd']")
dr.find_element_by_xpath("//input[@class='s_ipt']")
dr.find_element_by_xpath("/html/body/form/span/input")
dr.find_element_by_xpath("//span[@class='soutu-btn']/input")
dr.find_element_by_xpath("//form[@id='form']/span/input")
dr.find_element_by_xpath("//input[@id='kw' and @name='wd']")
通过css定位，css定位有N种写法，这里列几个常用写法:

dr.find_element_by_css_selector("#kw")
dr.find_element_by_css_selector("[name=wd]")
dr.find_element_by_css_selector(".s_ipt")
dr.find_element_by_css_selector("html > body > form > span > input")
dr.find_element_by_css_selector("span.soutu-btn> input#kw")
dr.find_element_by_css_selector("form#form > span > input")
接下来，我们的页面上有一组文本链接。

<a class="mnav" href="http://news.baidu.com" name="tj_trnews">新闻</a>
<a class="mnav" href="http://www.hao123.com" name="tj_trhao123">hao123</a>
通过link text定位:

dr.find_element_by_link_text("新闻")
dr.find_element_by_link_text("hao123")
通过link text定位:

dr.find_element_by_partial_link_text("新")
dr.find_element_by_partial_link_text("hao")
dr.find_element_by_partial_link_text("123")

案例
import time  
from selenium import webdriver  
from selenium.webdriver.common.keys import Keys  
from selenium.webdriver.common.action_chains import ActionChains  

driver = webdriver.Firefox()  
driver.get("http://www.baidu.com")  
  
#鼠标移动至图片上 右键保存图片  
elem_pic = driver.find_element_by_xpath("//div[@id='lg']/img")  
print elem_pic.get_attribute("src")  
action = ActionChains(driver).move_to_element(elem_pic)  
action.context_click(elem_pic)  
  
#重点:当右键鼠标点击键盘光标向下则移动至右键菜单第一个选项  
action.send_keys(Keys.ARROW_DOWN)  
time.sleep(3)  
action.send_keys('v') #另存为  
action.perform()  
  
#获取另存为对话框(失败)  
alert.switch_to_alert()  
alert.accept() 

#输入框输入内容  
elem = driver.find_element_by_id("kw")  
elem.send_keys("Eastmount CSDN")  
time.sleep(3)  
  
#删除一个字符CSDN 回退键  
elem.send_keys(Keys.BACK_SPACE)  
elem.send_keys(Keys.BACK_SPACE)  
elem.send_keys(Keys.BACK_SPACE)  
elem.send_keys(Keys.BACK_SPACE)  
time.sleep(3)  
  
#输入空格+"博客"  
elem.send_keys(Keys.SPACE)  
elem.send_keys(u"博客")  
time.sleep(3)  
  
#ctrl+a 全选输入框内容  
elem.send_keys(Keys.CONTROL,'a')  
time.sleep(3)  
  
#ctrl+x 剪切输入框内容  
elem.send_keys(Keys.CONTROL,'x')  
time.sleep(3)  
  
#输入框重新输入搜索  
elem.send_keys(Keys.CONTROL,'v')  
time.sleep(3)  
  
#通过回车键替代点击操作  
driver.find_element_by_id("su").send_keys(Keys.ENTER)  
time.sleep(3)  
  
driver.quit()          